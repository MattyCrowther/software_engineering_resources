# Set a seed to make randomness reproducible
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes <- sample(
x = 1:150,
size = 100)
# Inspect the random indexes
print(indexes)
# Create a training set from indexes
train <- iris[indexes, ]
# Create a test set from remaining indexes
test <- iris[-indexes, ]
# Load the decision tree package
library(tree)
install.packages("tree")
# Load the decision tree package
library(tree)
# Train a decision tree model
model <- tree(
formula = Species ~ .,
data = train)
# Train a decision tree model
model <- tree(
formula = Species ~ ., #Equilvaent is formula = Species ~ Petal.Length + Petal.Width + sepal.Length + sepal.Width
data = train)
# Inspect the model
summary(model)
# Visualize the decision tree model
plot(model)
text(model)
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# Plot the decision boundaries
partition.tree(
tree = model,
label = "Species",
add = TRUE)
# Predict with the model
predictions <- predict(
object = model,
newdata = test,
type = "class")
# Create a confusion matrix
table(
x = predictions,
y = test$Species)
# Load the caret package
library(caret)
# Evaluate the prediction results
confusionMatrix(
data = predictions,
reference = test$Species)
# Evaluate the prediction results
confusionMatrix(
data = predictions,
reference = test$Species)
# Set working directory
setwd("D:/Work/general/R/data_science/7-r-data-science-m7-exercise-files/")
# Save the tree model
save(model, file = "Tree.RData")
# Save the training data
save(train, file = "Train.RData")
# Set working directory
setwd("D:/Work/general/R/data_science/8-r-data-science-m8-exercise-files/")
# Save the tree model
save(model, file = "Tree.RData")
# Save the training data
save(train, file = "Train.RData")
# Load shiny
library(shiny)
# Deploying to Production
install.packages("shiny")
# Load shiny
library(shiny)
# Create a UI
ui <- fluidPage("Hello World!")
# Create a server
server <- function(input, output) {}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Create a UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
# Create a server than maps input to output
server <- function(input, output) {
output$text <- renderText({
paste("You selected ", input$num )})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Load decision tree package
library(tree)
# Set working directory
setwd("D:/Work/general/R/data_science/9-r-data-science-m9-exercise-files/")
# Load training data
load("Train.RData")
# Load tree model
load("Tree.RData")
# Load color brewer library
library(RColorBrewer)
# Load training data
load("Train.RData")
# Load tree model
load("Tree.RData")
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
# Create server code
server <- function(input, output) {
output$text = renderText({
# Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# Create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# Plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Load shiny
library(shiny)
# Create a UI
ui <- fluidPage("Hello World!")
# Create a server
server <- function(input, output) {}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Set working directory
setwd("D:/Work/general/R/data_science/9-r-data-science-m9-exercise-files/")
# Deploying to Production
install.packages("shiny")
# Load shiny
library(shiny)
# Load decision tree package
library(tree)
# Load training data
load("Train.RData")
# Create a server than maps input to output
server <- function(input, output) {
output$text <- renderText({
paste("You selected ", input$num )})
}
# Create a UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Load color brewer library
library(RColorBrewer)
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
install.packages("shiny")
# Create server code
server <- function(input, output) {
output$text = renderText({
# Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# Create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# Plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
(
# Set working directory
setwd("D:/Work/general/R/data_science/9-r-data-science-m9-exercise-files/")
# Deploying to Production
#install.packages("shiny")
# Load shiny
library(shiny)
# Load decision tree package
library(tree)
# Deploying to Production
#install.packages("shiny")
# Load shiny
library(shiny)
# Load decision tree package
library(tree)
# Load training data
load("Train.RData")
# Load tree model
load("Tree.RData")
# Create a UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
# Create a server than maps input to output
server <- function(input, output) {
output$text <- renderText({
paste("You selected ", input$num )})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
# Set working directory
setwd("D:/Work/general/R/data_science/9-r-data-science-m9-exercise-files/")
# Deploying to Production
#install.packages("shiny")
# Load shiny
library(shiny)
# Load decision tree package
library(tree)
# Load color brewer library
library(RColorBrewer)
# Load training data
load("Train.RData")
# Load tree model
load("Tree.RData")
# Create a UI with I/O controls
ui <- fluidPage(
titlePanel("Input and Output"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "num",
label = "Choose a Number",
min = 0,
max = 100,
value = 25)),
mainPanel(
textOutput(
outputId = "text"))))
# Create a server than maps input to output
server <- function(input, output) {
output$text <- renderText({
paste("You selected ", input$num )})
}
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create user interface code
ui <- fluidPage(
titlePanel("Iris Species Predictor"),
sidebarLayout(
sidebarPanel(
sliderInput(
inputId = "petal.length",
label = "Petal Length (cm)",
min = 1,
max = 7,
value = 4),
sliderInput(
inputId = "petal.width",
label = "Petal Width (cm)",
min = 0.0,
max = 2.5,
step = 0.5,
value = 1.5)),
mainPanel(
textOutput(
outputId = "text"),
plotOutput(
outputId = "plot"))))
# Create server code
server <- function(input, output) {
output$text = renderText({
# Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# Make prediction
prediction = predict(
object = model,
newdata = predictors,
type = "class")
# Create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# Plot the decision boundaries
partition.tree(
model,
label = "Species",
add = TRUE)
# Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
# Create a shiny app
shinyApp(
ui = ui,
server = server)
