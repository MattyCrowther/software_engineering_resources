help(int)
??int
help(rnorm)
example(rnorm)
demo(rnorm)
demo()
student.marks <- c(10, 20, 30,  40) #using combine function
student.marks #print variable content
#Vectorized operations :Flavor I :Input - Single vector, Output - Scalar
mean(student.marks)
#Vectorized operations :Flavor II :Input - Single vector, output - Single vector
student.marks <- student.marks + 5 #arithmetic operator
student.marks
student.marks >= 30 #logical operator
student.names <- c("Raj","Rahul","Priya","Poonam")
student.weights <- c( 60.5, 72.5 , 45.2,  47.5)
student.genders <- factor(c("Male","Male","Female","Female"))
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L) #Lists with different types.
#Creating unnamed list
student1 <- list(student.names[1], student.weights[1], student.genders[1],
student.physics.marks[1], student.chemistry.marks[1])
str(student1)
student1
student1[1] #Single brackets [] return element of same type
typeof(student1[1])
student1[[1]] #double brackets [[]] return the object in its own type
typeof(student1[[1]])
student1[1:3] #Access multiple elements using index
#Creating named list
student1 <- list(name = student.names[1],
weight = student.weights[1],
gender = student.genders[1],
physics = student.physics.marks[1],
chemistry = student.chemistry.marks[1])
str(student1)
student1[["name"]]
student1$gender #Access element using element name or label
student1[c("physics","chemistry")] #Access multiple elements using label names
#Use length() to get number of elements
length(student1)
student1 <- list(name = student.names[1],
weight = student.weights[1],
gender = student.genders[1],
marks = c(student.physics.marks[1], student.chemistry.marks[1])) #Vector inside list.
str(student1)
students[student.physics.marks >= 75,]
source('D:/Work/general/R/r_fundementals/data_frames.r')
source('D:/Work/general/R/r_fundementals/data_frames.r')
student.names <- c("Raj","Rahul","Priya","Poonam")
student.weights <- c( 60.5, 72.5 , 45.2,  47.5)
student.genders <- factor(c("Male","Male","Female","Female"))
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
students
str(students)
#Use stringAsFactors = FALSE , to avoid converstion of character vector to factor
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks,
stringsAsFactors = FALSE)
#Subsetting: Extract element(s) in data frame
students[1] #Single brackets [] return element of same type
typeof(students[1])
students[[1]] #double brackets [[]] return the object in its own type
students[["student.names"]] #double brackets [[]] return the object in its own type
typeof(students[["student.names"]])
students$student.names #$ return the object in its own type
students[1:3]
students[c("student.physics.marks","student.chemistry.marks")]
students
students[1:3,1:2]
students[c(1,2),c(1,3)]
students[,1]
students[c(T,F,T,F),]
students[student.genders == "Male",]
students[student.physics.marks >= 75,]
str(students)
#Create data frame
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks)
typeof(students[[1]])
students[1,2] #Row number, Column number
typeof(students$student.names)
typeof(students)
students[1,]
student.names <- c("Raj","Rahul","Priya","Poonam")
student.weights <- c( 60.5, 72.5 , 45.2,  47.5)
student.genders <- factor(c("Male","Male","Female","Female"))
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
#Create data frame
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks)
typeof(students)
students
str(students)
#Use stringAsFactors = FALSE , to avoid converstion of character vector to factor
students <- data.frame(student.names,student.weights,student.genders,
student.physics.marks, student.chemistry.marks,
stringsAsFactors = FALSE)
str(students)
#Subsetting: Extract element(s) in data frame
students[1] #Single brackets [] return element of same type
typeof(students[1])
students[[1]] #double brackets [[]] return the object in its own type
typeof(students[[1]])
students[["student.names"]] #double brackets [[]] return the object in its own type
typeof(students[["student.names"]])
students$student.names #$ return the object in its own type
typeof(students$student.names)
students[1:3]
students[c("student.physics.marks","student.chemistry.marks")]
students
students[1,2] #Row number, Column number
students[1:3,1:2]
students[c(1,2),c(1,3)]
students[,1]
students[1,]
students[c(T,F,T,F),]
students[student.genders == "Male",]
students[student.physics.marks >= 75,]
#A list but only contain same class.
student.physics.marks <- c( 70L , 75L , 80L,  85L)
student.chemistry.marks <- c(60L, 70L, 85L, 70L)
student.marks <-rbind(student.physics.marks , student.chemistry.marks)
student.marks
student.marks <-cbind(student.physics.marks , student.chemistry.marks) #Column bind - Make matix by params as column
student.marks
student.marks
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam")
student.marks
student.marks
str(student.marks)
str(student.marks)
student.marks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=2,nrow=4) #Alt way of making matrix.
student.marks
student.marks <- matrix(c( 70L , 75L , 80L,  85L, 60L, 70L, 85L, 70L),ncol=4,nrow=2
,byrow=TRUE)
student.marks
student.marks <-cbind(student.physics.marks , student.chemistry.marks) #Column bind - Make matix by params as column
student.marks
student.marks <-cbind(student.physics.marks , student.chemistry.marks) #Column bind - Make matix by params as column
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam") #Set row names
student.marks
#Subsetting: Extract element(s) from matrix
student.marks[,] #row number,column number
student.marks[2,2]
student.marks[2,]
student.marks[,2]
student.marks[1:3,]
student.marks[c(1,3),]
student.marks[c(T,F,F,T),]
#summary
student.marks
rowSums(student.marks) #Row wise sum
colSums(student.marks) #Column wise sum
colMeans(student.marks) #Column wise mean
class1.student.physics.marks <- c( 70L , 75L , 80L,  85L)
class1.student.chemistry.marks <- c(60L, 70L, 85L, 70L)
class1.student.marks <-cbind(class1.student.physics.marks
, class1.student.chemistry.marks)
class1.student.marks
class2.student.physics.marks <- c( 71L , 76L , 81L,  86L)
class2.student.chemistry.marks <- c(61L, 71L, 86L, 71L)
class2.student.marks <-cbind(class2.student.physics.marks
, class2.student.chemistry.marks)
class2.student.marks
student.marks <- array(c(class1.student.marks,class2.student.marks), dim=c(4,2,2))
student.marks
source('D:/Work/general/R/r_fundementals/functions/basic_function.r')
source('D:/Work/general/R/r_fundementals/functions/basic_function.r')
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L))
source('D:/Work/general/R/r_fundementals/functions/basic_function.r')
source('D:/Work/general/R/r_fundementals/functions/basic_function.r')
GetTotalMarks <- function(quiz.marks, viva.marks, assignment.marks = 5L) {
total.marks <- quiz.marks + viva.marks
total.marks
}
student.physics.quiz.marks <- c(70L, 75L, 80L, 85L)
student.physics.viva.marks <- c(7L, 5L, 8L, 6L)
student.physics.total.marks <- GetTotalMarks(student.physics.quiz.marks,
student.physics.viva.marks)
student.physics.total.marks
student.chemistry.quiz.marks <- c(60L, 70L, 85L, 70L)
student.chemistry.viva.marks <- c(8L, 4L, 7L, 9L)
student.chemistry.total.marks <- GetTotalMarks(student.chemistry.quiz.marks,
student.chemistry.viva.marks)
student.chemistry.total.marks
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L))
#Multiple Return Values - Cannot actually return two values but can create list and return.
GetMarksSummaryMultipleReturns <- function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
avg.marks <- mean(total.marks)
return(list(total = total.marks,average = avg.marks))
}
GetMarksSummaryMultipleReturns(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
GetTotalMarks <- function(quiz.marks, viva.marks, assignment.marks = 5L,...) {
total.marks <- quiz.marks + viva.marks + assignment.marks + sum(...)
total.marks
}
#--------------------------------------------------------------------------------------
#Basic Function
student.physics.quiz.marks <- c(70L, 75L, 80L, 85L)
student.physics.viva.marks <- c(7L, 5L, 8L, 6L)
student.physics.total.marks <- GetTotalMarks(student.physics.quiz.marks,
student.physics.viva.marks)
student.physics.total.marks
student.chemistry.total.marks <- GetTotalMarks(student.chemistry.quiz.marks,
student.chemistry.viva.marks)
student.chemistry.total.marks
#--------------------------------------------------------------------------------------
#Default value
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
#--------------------------------------------------------------------------------------
#Optional Arguments.
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2)
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L), creativity.marks = 2,
attendence.marks = 3)
#--------------------------------------------------------------------------------------
#Lazy evaluation - extra.marks is only used when it is first called so this code is acceptible.
GetTotalMarksWithLazyEval <- function(quiz.marks, viva.marks, extra.marks = average.viva.marks) {
average.viva.marks <- mean(viva.marks)
total.marks <- quiz.marks + viva.marks + extra.marks
total.marks
}
#--------------------------------------------------------------------------------------
#Multiple Return Values - Cannot actually return two values but can create named list and return.
GetMarksSummaryMultipleReturns <- function(quiz.marks, viva.marks) {
total.marks <- quiz.marks + viva.marks
avg.marks <- mean(total.marks)
return(list(total = total.marks,average = avg.marks))
}
GetMarksSummaryMultipleReturns(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
#--------------------------------------------------------------------------------------
#Functions as objects - Functions are first class objects.
GetTotalMarksFAO <- function(quiz.marks,viva.marks){
total.marks <- quiz.marks + viva.marks
total.marks
}
formals(GetTotalMarksFAO) #Access args
body(GetTotalMarksFAO) #access body
#02Assign them
MyGetTotalMarksFAO <- GetTotalMarksFAO
#03 Use them as args to another func
GetTotalMarksFAO(quiz.marks = c(07L,75L,80L,85L))
#Pass func as arg in do.call func (do.call is just another way of calling something.)
do.call(GetTotalMarksFAO,list(quiz.marks = c(07L,75L,80L,85L),viva.marks = c(07L,75L,80L,85L)))
#--------------------------------------------------------------------------------------
#Using anonymous function
do.call(function(quiz.marks, viva.marks) {
quiz.marks + viva.marks
},list(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L)))
student.chemistry.viva.marks <- c(8L, 4L, 7L, 9L)
GetTotalMarksWithLazyEval(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L))
#01 Look into them
GetTotalMarksFAO #return function itself
GetTotalMarks(quiz.marks = c(70L, 75L, 80L, 85L), viva.marks = c(7L, 5L, 8L, 6L),
assignment.marks = c(2L, 1L, 3L, 4L))
MyGetTotalMarksFAO
student.chemistry.quiz.marks <- c(60L, 70L, 85L, 70L)
source('D:/Work/general/R/r_fundementals/functions/basic_function.r')
#03 Use them as args to another func
#Pass func as arg in do.call func (do.call is just another way of calling something.)
do.call(GetTotalMarksFAO,list(quiz.marks = c(07L,75L,80L,85L),viva.marks = c(07L,75L,80L,85L)))
#Simple if statement
IsGoodPerformanceByBatch <- function(test.marks) {
average.marks <- mean(test.marks)
performance.test <- average.marks >= 75
print(paste("average marks :",average.marks, "performance.test :",performance.test))
if(performance.test){
print("Overall performance of the batch is brilliant")
}
print("performance test completed")
}
IsGoodPerformanceByBatch(test.marks= c( 70L , 75L , 80L,  85L))
IsGoodPerformanceByBatch(test.marks= c( 50L , 55L , 60L,  70L))
#------------------------------------------------------------------------------------------------
#Simple if else statement
IsGoodPerformanceByBatchElse <- function(test.marks) {
average.marks <- mean(test.marks)
performance.test <- average.marks >= 75
print(paste("average marks :",average.marks, "performance.test :",performance.test))
if(performance.test){
print("Overall performance of the batch is brilliant")
}
else{
print("Overall performance of the batch is average")
}
print("performance test completed")
}
IsGoodPerformanceByBatchElse(test.marks= c( 70L , 75L , 80L,  85L))
IsGoodPerformanceByBatchElse(test.marks= c( 50L , 60L , 60L,  70L))
IsGoodPerformanceByBatchMultIf(test.marks= c( 50L , 60L , 60L,  70L))
IsGoodPerformanceByBatchMultIf(test.marks= c( 50L , 55L , 60L,  60L))
#-------------------------------------------------------------------------------------------------
#Switch statetemt
GetMarksSummary <- function(test.marks,summary.type) {
result <- switch(summary.type,
"mean" = {
mean(test.marks)
},
"median" = {
median(test.marks)
},
"variance" = {
var(test.marks)
},
"Not Implemented"
)
#result <- switch(summary.type,
#                  "mean" = mean(test.marks),
#                  "median" = median(test.marks),
#                  "variance" = var(test.marks),
#                  "Not Implemented")
result
}
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"median")
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"variance")
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"unknown")
test.marks >= 75
ifelse(test.marks >= 75,c("Great","Bravo","Excellent","Congrats"),
c("Keep it up","Not bad","Just missed","Jusk ok"))
#------------------------------------------------------------------------------------------------
#Multiple if-else statement
IsGoodPerformanceByBatchMultIf <- function(test.marks) {
average.marks <- mean(test.marks)
print(paste("average marks :",average.marks))
if(average.marks >= 75) {
print("Overall performance of the batch is brilliant")
}
else if(average.marks >= 60) {
print("Overall performance of the batch is satisfactory")
}
else {
print("Overall performance of the batch is below average")
}
print("performance test completed")
}
#-------------------------------------------------------------------------------------------------
#Vectorized if
test.marks <- c( 70L , 75L , 80L, NA)
IsGoodPerformanceByBatchMultIf(test.marks= c( 70L , 75L , 80L,  85L))
GetMarksSummary(test.marks= c( 70L , 75L , 80L,  85L),"mean")
ifelse(test.marks >= 75,"With distinction","Without distinction")
#-------------------------------------------------------------------------------------------------
#While loop
WriteOnNoteBook <- function(total.page.count)
{
count <- 0
while(count < total.page.count){
count <- count + 1
print(paste("writing on page number",count))
}
print("Page finished")
}
WriteOnNoteBook(total.page.count = 10)
#-------------------------------------------------------------------------------------------------
#For loop
WriteOnNoteBook <- function(total.page.count)
{
for(count in 1:total.page.count){
print(paste("writing on page number",count))
}
print("Page finished")
}
WriteOnNoteBook(total.page.count = 10)
#-------------------------------------------------------------------------------------------------
#Applpy function
student.marks <- matrix(c( 70L, 75L, 72L, 80L, 50L,
80L, 85L, 60L, 72L, 88L,
60L, 70L, 87L, 55L, 90L,
85L, 70L, 74L, 86L, 78L ),ncol=5,nrow=4, byrow=TRUE)
rownames(student.marks) <- c("Raj","Rahul","Priya","Poonam")
colnames(student.marks) <-
c("Physics","Chemistry","Mathematics", "Biology","History")
student.marks
result <- vector("numeric",length=nrow(student.marks))
apply(student.marks,1,sum) #1 = want to work on rows
apply(student.marks,3,max)
library()
packages = install.packages()
packages = installed.packages()
typeof(packages)
packages
view(packages)
View(packages)
search() #All loaded packages
#Load package using library function
library("parallel")
library(parallel) #without quotes
search()
#Unload or detach a package
detach(package:parallel, unload=TRUE)
#Load a library, which is not installed will give error
library(newpackage)
install.packages("plyr") #Single package
install.packages(c("ggplot2","randomForest","RColorBrewer")) #Multiple packages
install.packages("devtools") #Required for installation from github
library(devtools) #Load package
install_github("slidify", "ramnathv") #Install package from github
#-----------------------------------------------------------------------------------
#Managing Packages
update.packages()
getwd()
setwd(D:/)
setwd("D:/")
getwd()
setwd("D:/Work/general/R/")
setwd("D:/Work/general/R/r_fundementals/")
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","01Sample.csv")
my.data <- read.csv(file)
str(my.data)
my.data
#Tabular importation (Generic way of importing data into tabular format)
file <- file.path("data","02Sample.txt")
my.data <- read.table(file,
header=TRUE,  #Contains header
skip=1, #Skip 1 line
colClasses=c("character","factor","numeric","integer","integer"))
getwd()
#Tabular importation (Generic way of importing data into tabular format)
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","02Sample.txt")
my.data <- read.table(file,
header=TRUE,  #Contains header
skip=1, #Skip 1 line
colClasses=c("character","factor","numeric","integer","integer"))
str(my.data)
#URL
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","03DownloadedFile.data")
download.file(url,local)
#URL
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
local <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","03DownloadedFile.data")
download.file(url,local)
my.data <- read.table(local,sep=",")
str(my.data)
#XML
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","04Sample.xml")
install.packages("XML")
library(XML)
my.data <- xmlToDataFrame(file,
colClasses=c("character","integer","integer"),
stringsAsFactors=FALSE)
str(my.data)
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","05Sample.xlsx")
install.packages("XLConnect")
library(XLConnect)
my.data <- readWorksheetFromFile(file,
sheet=1,
startRow=2)
file <- file.path("course_files/9-r-programming-fund-m9-exercise-files/data","05Sample.xlsx")
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages(rJava)
install.packages("rJava")
install.packages("XLConnect")
library(XLConnect)
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
#-------------------------------------------------------------------------------------------------
#Import built in datasets (Data sets which are built into packages)
library(datasets)
data(package="datasets")
data(iris)
str(iris)
install.packages("RODBC")
library(RODBC)
connect <- odbcConnect("mysqlconnection")
library(datasets)
data(iris)
str(iris)
head(iris)
mean(iris$Sepal.Length) #mean =
median(iris$Sepal.Length) #Median = middle value
range(iris$Sepal.Length)
diff(range(iris$Sepal.Length))
summary(iris$Sepal.Length)
summary(iris)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length,horizontal = TRUE)
boxplot.stats(iris$Sepal.Length)
boxplot(iris[1:4])
Sepal.Length
hist(iris$Sepal.Length)
hist(iris$Sepal.Length,main = "Histogram of sepal length",xlab="Sepal Length")
var(iris$Sepal.Length)
sd(iris$Sepal.Length)
("psych")
install.packages("psych")
library(pysch)
library(psych)
describeBy(iris,group = iris$Species)
library(lattice)
histogram(~Sepal.Length|Species,
data = iris,
layout=c(1,3),
col = "black")
boxplot(Sepal.Length~Species,
data = iris)
