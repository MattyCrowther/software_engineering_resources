#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7Useful links:
   https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
   https://www.thecodeship.com/patterns/guide-to-python-function-decorators/
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   Commands/Setup: python3 - brings the interactive prompt for python interpreter.
                   python3 -m venv venv - Tells python to run the venv package named venv. (Venv is virtual enviroment).
                   source venv/bin/activate - Activates the venv (like prompt inside console). **
                   pip install flask - install flask microframework.
                   import flask - check if flask is present.
                   export FLASK_APP=microblog.py

      
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Teachings:
   functions:  In pythons functions are to be treat as objects and can be used in more ways. Some different ways:
               Assign functions to variables.
               Define functions inside other functions. (The inner function has access to the enclosing function/scope).
               Functions passed as parameters to other functions.
               Functions can return other functions.
               
   decorators: Common in python.
               Function decorators are simply wrappers to existing functions.

               Flask:
               a decorator modifies the function that follows it. 
               A common pattern with decorators is to use them to register functions as callbacks for certain events.

               These two below are decorators for the method "index" , 
               A decorator modifies the function that follows it. 
               A common pattern with decorators is to use them to register functions as callbacks for certain events. 
               In this case, the @app.route decorator creates an association between the URL given as an argument and the function. 
               nIn this example there are two decorators, which associate the URLs / and /index to this function. 
               This means that when a web browser requests either of these two URLs, Flask is going to invoke this function and pass the return value of it back to the browser as a response.

   Templates: Helps to keep the seperation between presentation and logic when adding html etc to the project.
              Templates are written as separate files, stored in a templates folder that is inside the application package.
              render_template is a function from flask which takes a template filename and bariable list of template args and returns the template.
               

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Flask Specific:
   __init__.py - This is required for any package created. Contains something like:
                 from flask import Flask      #Standard.
                 app = Flask(__name__)        #Means the packageName = a python pre-defined variable which is set to the name of the module it is used in.
                 from app import routes       #Imports specific class from package app.

                 The script above simply creates the application object as an instance of class.

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
